from fastapi import FastAPI, HTTPException, Depends, File, UploadFile
from fastapi.security import OAuth2PasswordBearer
from pydantic import BaseModel, EmailStr
from typing import List
from uuid import uuid4
import os

# Check if ssl module is available before importing anything dependent on it
try:
    import ssl
    SSL_AVAILABLE = True
except ImportError:
    SSL_AVAILABLE = False

# Uncomment the following in a fully supported environment
# if SSL_AVAILABLE:
#     from cryptography.fernet import Fernet

app = FastAPI()
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")

# Simulated database
users_db = {}
files_db = {}

# User roles
ROLES = {"OPS": "ops", "CLIENT": "client"}

class User(BaseModel):
    id: str
    email: EmailStr
    password: str
    role: str
    email_verified: bool = False

class SignupRequest(BaseModel):
    email: EmailStr
    password: str

class FileMeta(BaseModel):
    id: str
    filename: str
    uploaded_by: str

UPLOAD_FOLDER = "./uploads"
os.makedirs(UPLOAD_FOLDER, exist_ok=True)

# Utility functions
def get_user_by_token(token: str):
    return users_db.get(token)

# OPS login (mock)
@app.post("/ops/login")
def ops_login(email: str, password: str):
    for token, user in users_db.items():
        if user.email == email and user.password == password and user.role == ROLES["OPS"]:
            return {"token": token}
    raise HTTPException(status_code=401, detail="Invalid OPS credentials")

# OPS upload file
@app.post("/ops/upload")
def upload_file(file: UploadFile = File(...), token: str = Depends(oauth2_scheme)):
    user = get_user_by_token(token)
    if not user or user.role != ROLES["OPS"]:
        raise HTTPException(status_code=403, detail="Unauthorized")

    if not file.filename.endswith((".pptx", ".docx", ".xlsx")):
        raise HTTPException(status_code=400, detail="Only .pptx, .docx, .xlsx allowed")

    file_id = str(uuid4())
    path = os.path.join(UPLOAD_FOLDER, f"{file_id}_{file.filename}")
    with open(path, "wb") as buffer:
        buffer.write(file.file.read())

    files_db[file_id] = FileMeta(id=file_id, filename=file.filename, uploaded_by=user.id)
    return {"message": "File uploaded", "file_id": file_id}

# Client sign up
@app.post("/client/signup")
def client_signup(data: SignupRequest):
    token = str(uuid4())
    users_db[token] = User(id=str(uuid4()), email=data.email, password=data.password, role=ROLES["CLIENT"])
    verify_url = f"/client/verify-email/{token}"
    return {"message": "Check your email", "verify_url": verify_url}

# Client verify email
@app.get("/client/verify-email/{token}")
def verify_email(token: str):
    user = users_db.get(token)
    if not user:
        raise HTTPException(status_code=404, detail="Invalid verification link")
    user.email_verified = True
    return {"message": "Email verified successfully"}

# Client login
@app.post("/client/login")
def client_login(email: str, password: str):
    for token, user in users_db.items():
        if user.email == email and user.password == password and user.role == ROLES["CLIENT"]:
            if not user.email_verified:
                raise HTTPException(status_code=403, detail="Email not verified")
            return {"token": token}
    raise HTTPException(status_code=401, detail="Invalid credentials")

# List uploaded files
@app.get("/client/files")
def list_files(token: str = Depends(oauth2_scheme)):
    user = get_user_by_token(token)
    if not user or user.role != ROLES["CLIENT"]:
        raise HTTPException(status_code=403, detail="Unauthorized")
    return list(files_db.values())

# Test cases
from fastapi.testclient import TestClient
client = TestClient(app)

def test_ops_login_failure():
    response = client.post("/ops/login", params={"email": "ops@example.com", "password": "wrong"})
    assert response.status_code == 401

def test_client_signup_and_verify():
    response = client.post("/client/signup", json={"email": "client1@example.com", "password": "1234"})
    assert response.status_code == 200
    data = response.json()
    assert "verify_url" in data
    verify_url = data["verify_url"]
    token = verify_url.split("/")[-1]
    response = client.get(verify_url)
    assert response.status_code == 200
    assert response.json()["message"] == "Email verified successfully"
    response = client.post("/client/login", params={"email": "client1@example.com", "password": "1234"})
    assert response.status_code == 200
    assert "token" in response.json()

def test_unauthorized_file_upload():
    response = client.post("/ops/upload", headers={"Authorization": "Bearer fake-token"})
    assert response.status_code == 403

def test_invalid_file_type_upload():
    # Setup OPS user
    response = client.post("/client/signup", json={"email": "ops@example.com", "password": "123"})
    token = response.json()["verify_url"].split("/")[-1]
    client.get(f"/client/verify-email/{token}")
    users_db[token].role = ROLES["OPS"]
    response = client.post("/ops/login", params={"email": "ops@example.com", "password": "123"})
    ops_token = response.json()["token"]
    file_data = {'file': ('test.txt', b"Hello", 'text/plain')}
    response = client.post("/ops/upload", headers={"Authorization": f"Bearer {ops_token}"}, files=file_data)
    assert response.status_code == 400
    assert response.json()["detail"] == "Only .pptx, .docx, .xlsx allowed"
